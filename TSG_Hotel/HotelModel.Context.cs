//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TSG_Hotel
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class HotelDBEntities : DbContext
    {
        public HotelDBEntities()
            : base("name=HotelDBEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Camere> Cameres { get; set; }
        public virtual DbSet<Dotari> Dotaris { get; set; }
        public virtual DbSet<Servicii> Serviciis { get; set; }
    
        public virtual ObjectResult<spCRUDCamere_Result> spCRUDCamere(Nullable<int> iD, Nullable<int> capacitate, Nullable<int> pret, string option)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var capacitateParameter = capacitate.HasValue ?
                new ObjectParameter("Capacitate", capacitate) :
                new ObjectParameter("Capacitate", typeof(int));
    
            var pretParameter = pret.HasValue ?
                new ObjectParameter("Pret", pret) :
                new ObjectParameter("Pret", typeof(int));
    
            var optionParameter = option != null ?
                new ObjectParameter("Option", option) :
                new ObjectParameter("Option", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spCRUDCamere_Result>("spCRUDCamere", iDParameter, capacitateParameter, pretParameter, optionParameter);
        }
    
        public virtual ObjectResult<spCRUDDotari_Result> spCRUDDotari(Nullable<int> iD, string nume, Nullable<int> pret, string option)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var numeParameter = nume != null ?
                new ObjectParameter("Nume", nume) :
                new ObjectParameter("Nume", typeof(string));
    
            var pretParameter = pret.HasValue ?
                new ObjectParameter("Pret", pret) :
                new ObjectParameter("Pret", typeof(int));
    
            var optionParameter = option != null ?
                new ObjectParameter("Option", option) :
                new ObjectParameter("Option", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spCRUDDotari_Result>("spCRUDDotari", iDParameter, numeParameter, pretParameter, optionParameter);
        }
    
        public virtual ObjectResult<spCRUDServicii_Result> spCRUDServicii(Nullable<int> iD, string nume, Nullable<int> pret, string option)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var numeParameter = nume != null ?
                new ObjectParameter("Nume", nume) :
                new ObjectParameter("Nume", typeof(string));
    
            var pretParameter = pret.HasValue ?
                new ObjectParameter("Pret", pret) :
                new ObjectParameter("Pret", typeof(int));
    
            var optionParameter = option != null ?
                new ObjectParameter("Option", option) :
                new ObjectParameter("Option", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spCRUDServicii_Result>("spCRUDServicii", iDParameter, numeParameter, pretParameter, optionParameter);
        }
    }
}
